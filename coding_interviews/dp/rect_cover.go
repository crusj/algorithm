package dp

// 矩形覆盖
// 我们可以用2*1的小矩形横着或者竖着去覆盖更大的矩形。请问用n个2*1的小矩形无重叠地覆盖一个2*n的大矩形，总共有多少种方法？
// base: dp[1] = 1, dp[2] = 2
// dp[n] 无重叠覆盖2*n的大矩形有dp[n]种方法
// 状态转移方程
// dp[n] = dp[n-1] + dp[n-2] // 要满足题意，2*1矩形要么横着放，要么竖着放竖着放dp[n-1]，横着放需要满足高度为2需要2个2*1所以为dp[n-2]
// 这里有一种无法想清楚的情况，就是竖着放一个2*1的矩形，可以竖着前放，竖着后放。横着放两个也存在此问题，如果这样想上面的公式似乎就不成立，网上也没有人对此有过说明，
// 只能换一种方式从空间占用的角度想，无论放前面还是后面占用的空间都是减少2*1，上面公式就会成立。
// 本质上就是斐波拉契数.
func rectCover(number int) int {
	dp := make([]int, number+1)
	dp[1] = 1
	dp[2] = 2
	for i := 3; i <= number; i++ {
		dp[i] = dp[i-1] + dp[i-2]
	}

	return dp[number]
}
